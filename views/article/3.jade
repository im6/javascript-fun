extends generic
block 3
    p
        | web构架是曲折前进的。
    p
        | 从刚开始Razor/Jade 后端渲染，到angular/react/vue等一大票SPA框架。
        | 于是冒出一大堆网站的主页面都是一个空div外加一个大bundle.js，清新简洁落落大方，沾沾自喜。
    p
        | 直到有人吐槽SEO性能太差，于是各大SPA又加上了server-side rendering属性。
        | 大伙玩的不亦乐乎， 新手上路分分钟甩出一个web app。
        | 各大互联网公司也热爱SPA， 比如instagram和WhatsApp就喜欢搞个纯纯的react.js用作首页。
    b
        | 注意，这里有一个大大的But： Facebook和新浪微博这种重型Web却扔在用一种“古老”的技术： BigPipe。
    p
        | 啥是BigPipe？ 有没有你的Big bundle.js牛逼? 本文对此进行简单分析。
    h1 官方定义
    ul
        li BigPipe是一个重新设计的劢态网页服务体系。
        li 将页面分解成一个个Pagelet，然后通过Web服务器和浏览器之间建立管道，进行分段输出（减少请求数）。
        li BigPipe不需要改变现有的网络浏览器或服务器。
    h2 特点：
    ul
        li 后端程序无需等到页面所有 Pagelet 的API都读取执行完，才输出到浏览器，服务器端不浏览器端并行处理，加快了页面显示。
        li Pagelet的渲染和输出顺序可以由后端程序控制，及早输出用户关心的模块。
    h2 为什么使用BigPipe
    ul
        li 解决速度瓶颈
        li 降低延迟时间

    h1 源码分析
    p 下面直接上干货。
    p 抓取新浪微博截取最新的（2017,06,27）代码，
    .pure-g
        .pure-u-md-1-1
            img.atcImg(src="http://dkny.oss-cn-hangzhou.aliyuncs.com/1/article/3/1.png")
    p 通过截图看得出来，初始状态下body > div 非常简单。动态内容主要依靠FM.view贯穿全局渲染。我们重点查看FM模块。
    p 虽然源码被混淆，不过加点注释还是可以读出其中的精髓的。
    h2 Pagelet加载流程
    ol
        li JavaScript异步加载css文件
        li 当css文件下载完成, 将html插入入页面空DIV
        li 启劢JavaScript，绑定事件等
    p 我们把微博分组模块作为范例(pl.nav.group.index)
    pre
        code.JavaScript
            | FM.view({
            |  "ns":"pl.nav.group.index",  // pagelet/component reference name
            |  "domid":"v6_pl_leftnav_group",  // DOM ID
            |  "css": ["style/css/module/global/WB_left_nav.css?version=716feb1e4288c3e0"], // Style dependency, css
            |  "js":["home/js/pl/nav/group/index.js?version=f35f25b485d9c6db"],  // Script dependency, js
            |  "html": "&lt;div class=\"WB_left_nav WB_left_nav_Atest\" node-type=\"groupList\" fixed-item=\"true\"&gt;\n .... &lt;\/div&gt;"})  // body html
            | });
    p  一目了然，FM.view函数就是用来动态载入模块的，内部包括了所有的所有的js，css文件，同事还把HTML的layout引入。
        | 我们一次讲解如何加载各个依赖。
    h2 JavaScript依赖
    pre
        code.Javascript
            | if (!Y(a, d)) {
            |    var k = bd("script"), // bd = document.createElement
            |        l = !1,
            |        m, n;
            |    bh(k, "src", a); // bh = set html attribute and value on element k
            |    bh(k, "charset", "UTF-8");
            |    m = k.onerror = k.onload = k.onreadystatechange = function() {
            |        if (!l && (!k.readyState || /loaded|complete/.test(k.readyState))) {
            |            l = !0;
            |            j(n);
            |            k.onerror = k.onload = k.onreadystatechange = null;
            |            g.removeChild(k);
            |            Z(a)
            |        }
            |    };
            |    n = h(m, 3e4); // h = settimeout, 延迟并绑定onerror和onload函数
            |    g.insertBefore(k, g.firstChild) // insert into
            | }
    h2 CSS依赖（异步加载）
    pre
        code.Javascript
            | function bl(a) {
            |    var b, c;
            |    if (m) { // 老版本ie检测以及处理，懒得分析
            |        for (b in bj)
            |            if (bj[b].length < 31) {
            |                c = p(b);
            |                break
            |            }
            |        if (!c) {
            |            b = x();
            |            c = bd("style");
            |            bh(c, "type", "text/css");
            |            bh(c, "id", b);
            |            g.appendChild(c);
            |            bj[b] = []
            |        }(c.styleSheet || c.sheet).addImport(a);
            |        bj[b].push(a)
            |    } else { // 现代浏览器部分
            |        b = x(); //生成script tag
            |        var d = bd("link");  // 设置script元素属性
            |        bh(d, "rel", "stylesheet");
            |        bh(d, "type", "text/css");
            |        bh(d, "href", a);
            |        bh(d, "id", b);
            |        g.appendChild(d)  //插入 document.head尾部
            |    }
            |    bi[a] = b // 对已处理的script文件进行标注管理
            | }
    h2 HTML元素
    pre
        code.Javascript
            | function s() {
            |     function b(b) {
            |         r();
            |         b || a[P] || bH()
            |     }
            |     d ? bv(function() {
            |         bF(d, function(f) {
            |             if (!a[P] && f && e != c) {
            |                 bG(f, d);
            |                 f.innerHTML = e || "";  // html injection
            |                 br(b);
            |                 delete a.html
            |             } else b(!0)
            |         })
            |     }) : b(!0)
            | }
    h1 状态管理
    p FM作为前端加载器，控制和执行各个模块的加载以及状态的改变。



    h1 适用场合
    p 所以，当我们用react或者Vue生成一个硕大的bundle文件以后，首屏载入速度必然受到影响，因此，除了SSR之外，
        | bigpipe也是一种很好的处理方法。
    p bigpipe实际加载效果
    .pure-g
        .pure-u-md-1-1
            img.atcImg(src="http://dkny.oss-cn-hangzhou.aliyuncs.com/1/article/3/2.png")
    p 单个bundle实际加载效果
    .pure-g
        .pure-u-md-1-1
            img.atcImg(src="http://dkny.oss-cn-hangzhou.aliyuncs.com/1/article/3/3.png")

    p 综上，BigPipe并不是适用于所有的场合，类似于Facebook和微博，他主要适用于：
    ul
        li 第一个请求时间较长，后端程序需要读取多个API
        li 页面上的劢态内容可以划分在多个区块内显示，且各个区块之间的关系不大（极弱耦合）

