extends generic
block 4
    h2 前言
    p
        | 当下，Vue、React和Angular异常火爆。而三者的共同点之一，就是都可以借助Webpack
        | 构建项目。Webpack作为打包工具，对于输出端至关重要。如果进行脚本优化，则应当从
        | Webpack 开始说起。
    p 本文重点讲述如何减少bundle体积，以及加快页面加载速度。

    div(style="background:#ececec;padding:10px;border-radius:6px;")
        | 首先引入一个小问题：
        br
        | 打开本页面的开发窗口，如果是Chrome用户点击F12，在Network标签下发现分别从两个地方下载了vue.js。
        | 这两个文件名称相同，内容相同。一个从CDN加载，一个从OSS加载。可为什么文件尺寸区别这么大？
    p (图中浏览器Chrome:Mac Version 60.0.3112.101)
    .pure-g
        .pure-u-md-1-1
            img.atcImg(src="//dkny1.oss-cn-hangzhou.aliyuncs.com/1/article/4/console.png")
    script.
        var script0 = document.createElement('script');
        script0.type = "text/javascript";
        script0.charset = "utf-8";
        script0.src = '//cdn.bootcss.com/vue/2.4.2/vue.js';
        document.head.appendChild(script0);

        var script1 = document.createElement('script');
        script1.type = "text/javascript";
        script1.charset = "utf-8";
        script1.src = '//dkny1.oss-cn-hangzhou.aliyuncs.com/1/article/4/vue.js';
        document.head.appendChild(script1);
    h2 正文说明
    p
        | 关于Webpack的优化，相关文章说明很多，也很详细。但是缺乏一个“本土化”的总结。因此，过去反复讲述的东西，
        | 本文章简单提及，而真正的干货，则详细展开。
    ul
        li 版本更替。 Webpack 1.x 到目前Webpack 3.5(2017.08.21)版本差异也造成了一些文章不准确。
        li 网络连接。 由于某些因素，代码的accessibility也十分重要。如何部署出人人可见的代码。

    h2 Webpack中的一般优化
    ol
        li
            h3 提取bundle中图片，用以减少体积。
            p Webpack将图片直接转换为base64格式，使得图片间接存入bundle文件，导致体积过大。
                | 缺点是需要额外的时间载入图片。
            p 方法: 图片取消转化而改为引用。
        li
            h3 OccurrenceOrder
            p new webpack.optimize.OccurrenceOrderPlugin()
            p 打包过程中，最小化id值。在Webpack v2.0以及以后的版本默认添加。
        li
            h3 DefinePlugin
            p 改变环境变量。
            p 当NODE_ENV=production后，提升代码打包效果。UglifyJS会将dev模式下的代码清洗掉(如react)。
        li
            h3 Dedupe
            p 防止代码重复添加。
            p 在Webpack v2.0以及以后的版本不再需要。
        li
            h3 Uglify
            p new webpack.optimize.UglifyJsPlugin([options])
            p 老生常谈，注意除了UglifyJsPlugin本身的配置之外，uglifyOptions内部也有很多需要注意。
                | 比如 “screw_ie8”等。
        li
            h3 Externals
            p 将一些常用的库和模块，比如react/angular/vue/rxjs/immutable等从bundle文件分离出来。
                | 增添全局变量(比如window.React)，引入CDN公用库文件，如BootCDN等。
        li
            h3 CommonsChunk
            p
                ul
                    li single page: 生成类似app.js和vendor.js两个文件,由服务器本身提供加载，提升缓存效率；
                    li multi entry: 任意组合的分割重组。
        li
            h3 Scope Hoisting
            p new webpack.optimize.ModuleConcatenationPlugin()
            p 在Webpack 3中新引进的。使用简单，效果不错。
        li
            h3 Lazy load
            p 如果只用到某个库的一部分内容，就不需要讲整个源码都包含入bundle中。
            p 如蚂蚁金服ant.design的babel-plugin-import， 或者lodash-webpack-plugin,
                | 以及lodash.xxx替代lodash的局部模块，。
        li
            h3 devtool
            p 有文章建议cheap-module-source-map，但是production环境下Dev意义不大，直接devtool=false

        li
            h3 gzip/compression
            p compression-webpack-plugin, expressjs/compression。
            p 非常重要，下文详细讲。
    h2 高级优化
    p 回到本文的开始的问题，答案就是
        b HTTP压缩。
    p 现代浏览器在进行http请求的时候，基本全部支持gzip压缩。在发出请求的时候，会在头部显示
        em Accept-Encoding:gzip, deflate
        | 也就是告诉服务器，我可以接受这两种压缩格式。
    p 那么服务器也就不客气，直接回复压缩格式，而vue.js就以非常小的尺寸完成了传输。在页面载入之前被浏览器解压释放。





